name: publish Mehedi.Hangfire.Extensions to nuget
on:
  workflow_dispatch:
  push:
    branches: 
      - master
    paths:
      - 'src/Mehedi.Hangfire.Extensions/**'
      
jobs:
  publish:
    name: list on nuget
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      # Required for a specific dotnet version that doesn't come with ubuntu-latest / windows-latest
      # Visit bit.ly/2synnZl to see the list of SDKs that are pre-installed with ubuntu-latest / windows-latest
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      # Increment the version
      # - name: Bump version and push tag
      #   id: bump_version
      #   uses: dotnet/versionsweeper@v1
      #   with:
      #     path: 'src/Mehedi.Hangfire.Extensions/Mehedi.Hangfire.Extensions.csproj'
      #     version-regex: '<Version>(.*)<\/Version>'
      #     bump: 'patch' # Set this to 'patch', 'minor', or 'major' depending on your versioning strategy
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Increment the version
      - name: Bump version
        run: |
          VERSION_FILE=src/Mehedi.Hangfire.Extensions/Mehedi.Hangfire.Extensions.csproj
          VERSION_REGEX='<Version>(.*)<\/Version>'
          
          # Extract the current version
          current_version=$(grep -oP "$VERSION_REGEX" $VERSION_FILE | sed -E "s/$VERSION_REGEX/\1/")
          
          # Split the version into components
          IFS='.' read -r major minor patch <<< "$current_version"
          
          # Increment the patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          
          # Update the version in the .csproj file
          sed -i "s/<Version>$current_version<\/Version>/<Version>$new_version<\/Version>/" $VERSION_FILE
          
          # Configure git
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # Commit and tag the new version
          git add $VERSION_FILE
          git commit -m "Bump version to $new_version"
          git tag "v$new_version"
          git push origin master --tags
        shell: bash
      
      # Publish
      - name: publish on version change
        uses: rohith/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: src/Mehedi.Hangfire.Extensions/Mehedi.Hangfire.Extensions.csproj # Relative to repository root
          # VERSION_FILE_PATH: Directory.Build.props # Filepath with version info, relative to repository root. Defaults to project file
          VERSION_REGEX: <Version>(.*)<\/Version> # Regex pattern to extract version info in a capturing group
          TAG_COMMIT: true # Flag to enable / disable git tagging
          TAG_FORMAT: v* # Format of the git tag, [*] gets replaced with version
          NUGET_KEY: ${{secrets.NUGET_API_KEY}} # nuget.org API key
